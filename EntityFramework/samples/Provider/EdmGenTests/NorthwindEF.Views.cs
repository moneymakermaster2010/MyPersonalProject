//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17379
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets2791A08CEDC5722F2A02D71B9D51861E3BB8A1796A2FE7FDC0A1A95DA9F64E7C))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySets2791A08CEDC5722F2A02D71B9D51861E3BB8A1796A2FE7FDC0A1A95DA9F64E7C : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public ViewsForBaseEntitySets2791A08CEDC5722F2A02D71B9D51861E3BB8A1796A2FE7FDC0A1A95DA9F64E7C()
        {
            this.EdmEntityContainerName = "NorthwindEFContext";
            this.StoreEntityContainerName = "NorthwindEFStoreContainer";
            this.HashOverMappingClosure = "ea8bee8846a766848afe13ea0cd08eb25844fd2260e7b1a91f48c513558a02ae";
            this.HashOverAllExtentViews = "c1128357665c18dd571c7a629dd2e731ee824efcd8e1ec7d2b45aa5b1471b7d0";
            this.ViewCount = 62;
        }
        
        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            if ((index == 2))
            {
                return GetView2();
            }
            if ((index == 3))
            {
                return GetView3();
            }
            if ((index == 4))
            {
                return GetView4();
            }
            if ((index == 5))
            {
                return GetView5();
            }
            if ((index == 6))
            {
                return GetView6();
            }
            if ((index == 7))
            {
                return GetView7();
            }
            if ((index == 8))
            {
                return GetView8();
            }
            if ((index == 9))
            {
                return GetView9();
            }
            if ((index == 10))
            {
                return GetView10();
            }
            if ((index == 11))
            {
                return GetView11();
            }
            if ((index == 12))
            {
                return GetView12();
            }
            if ((index == 13))
            {
                return GetView13();
            }
            if ((index == 14))
            {
                return GetView14();
            }
            if ((index == 15))
            {
                return GetView15();
            }
            if ((index == 16))
            {
                return GetView16();
            }
            if ((index == 17))
            {
                return GetView17();
            }
            if ((index == 18))
            {
                return GetView18();
            }
            if ((index == 19))
            {
                return GetView19();
            }
            if ((index == 20))
            {
                return GetView20();
            }
            if ((index == 21))
            {
                return GetView21();
            }
            if ((index == 22))
            {
                return GetView22();
            }
            if ((index == 23))
            {
                return GetView23();
            }
            if ((index == 24))
            {
                return GetView24();
            }
            if ((index == 25))
            {
                return GetView25();
            }
            if ((index == 26))
            {
                return GetView26();
            }
            if ((index == 27))
            {
                return GetView27();
            }
            if ((index == 28))
            {
                return GetView28();
            }
            if ((index == 29))
            {
                return GetView29();
            }
            if ((index == 30))
            {
                return GetView30();
            }
            if ((index == 31))
            {
                return GetView31();
            }
            if ((index == 32))
            {
                return GetView32();
            }
            if ((index == 33))
            {
                return GetView33();
            }
            if ((index == 34))
            {
                return GetView34();
            }
            if ((index == 35))
            {
                return GetView35();
            }
            if ((index == 36))
            {
                return GetView36();
            }
            if ((index == 37))
            {
                return GetView37();
            }
            if ((index == 38))
            {
                return GetView38();
            }
            if ((index == 39))
            {
                return GetView39();
            }
            if ((index == 40))
            {
                return GetView40();
            }
            if ((index == 41))
            {
                return GetView41();
            }
            if ((index == 42))
            {
                return GetView42();
            }
            if ((index == 43))
            {
                return GetView43();
            }
            if ((index == 44))
            {
                return GetView44();
            }
            if ((index == 45))
            {
                return GetView45();
            }
            if ((index == 46))
            {
                return GetView46();
            }
            if ((index == 47))
            {
                return GetView47();
            }
            if ((index == 48))
            {
                return GetView48();
            }
            if ((index == 49))
            {
                return GetView49();
            }
            if ((index == 50))
            {
                return GetView50();
            }
            if ((index == 51))
            {
                return GetView51();
            }
            if ((index == 52))
            {
                return GetView52();
            }
            if ((index == 53))
            {
                return GetView53();
            }
            if ((index == 54))
            {
                return GetView54();
            }
            if ((index == 55))
            {
                return GetView55();
            }
            if ((index == 56))
            {
                return GetView56();
            }
            if ((index == 57))
            {
                return GetView57();
            }
            if ((index == 58))
            {
                return GetView58();
            }
            if ((index == 59))
            {
                return GetView59();
            }
            if ((index == 60))
            {
                return GetView60();
            }
            if ((index == 61))
            {
                return GetView61();
            }
            throw new System.IndexOutOfRangeException();
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.Categories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.Categories", @"
    SELECT VALUE -- Constructing Categories
        [NorthwindEF.Store.Categories](T1.Categories_CategoryID, T1.Categories_CategoryName, T1.Categories_Description, T1.Categories_Picture)
    FROM (
        SELECT 
            T.CategoryID AS Categories_CategoryID, 
            T.CategoryName AS Categories_CategoryName, 
            T.Description AS Categories_Description, 
            T.Picture AS Categories_Picture, 
            True AS _from0
        FROM NorthwindEFContext.Categories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.CustomerDemographics
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.CustomerDemographics", @"
    SELECT VALUE -- Constructing CustomerDemographics
        [NorthwindEF.Store.CustomerDemographics](T1.CustomerDemographics_CustomerTypeID, T1.CustomerDemographics_CustomerDesc)
    FROM (
        SELECT 
            T.CustomerTypeID AS CustomerDemographics_CustomerTypeID, 
            T.CustomerDesc AS CustomerDemographics_CustomerDesc, 
            True AS _from0
        FROM NorthwindEFContext.CustomerDemographics AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.Customers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView2()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.Customers", @"
    SELECT VALUE -- Constructing Customers
        [NorthwindEF.Store.Customers](T1.Customers_CustomerID, T1.Customers_CompanyName, T1.Customers_ContactName, T1.Customers_ContactTitle, T1.Customers_Address, T1.Customers_City, T1.Customers_Region, T1.Customers_PostalCode, T1.Customers_Country, T1.Customers_Phone, T1.Customers_Fax, T1.Customers_Location)
    FROM (
        SELECT 
            T.CustomerID AS Customers_CustomerID, 
            T.CompanyName AS Customers_CompanyName, 
            T.ContactName AS Customers_ContactName, 
            T.ContactTitle AS Customers_ContactTitle, 
            T.Address AS Customers_Address, 
            T.City AS Customers_City, 
            T.Region AS Customers_Region, 
            T.PostalCode AS Customers_PostalCode, 
            T.Country AS Customers_Country, 
            T.Phone AS Customers_Phone, 
            T.Fax AS Customers_Fax, 
            T.Location AS Customers_Location, 
            True AS _from0
        FROM NorthwindEFContext.Customers AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.Employees
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView3()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.Employees", "\r\n    SELECT VALUE -- Constructing Employees\r\n        [NorthwindEF.Store.Employee" +
                    "s](T1.Employees_EmployeeID, T1.Employees_LastName, T1.Employees_FirstName, T1.Em" +
                    "ployees_Title, T1.Employees_TitleOfCourtesy, T1.Employees_BirthDate, T1.Employee" +
                    "s_HireDate, T1.Employees_Address, T1.Employees_City, T1.Employees_Region, T1.Emp" +
                    "loyees_PostalCode, T1.Employees_Country, T1.Employees_HomePhone, T1.Employees_Ex" +
                    "tension, T1.Employees_Photo, T1.Employees_Notes, T1.Employees_ReportsTo, T1.Empl" +
                    "oyees_PhotoPath, T1.Employees_Location)\r\n    FROM (\r\n        SELECT \r\n          " +
                    "  T.EmployeeID AS Employees_EmployeeID, \r\n            T.LastName AS Employees_La" +
                    "stName, \r\n            T.FirstName AS Employees_FirstName, \r\n            T.Title " +
                    "AS Employees_Title, \r\n            T.TitleOfCourtesy AS Employees_TitleOfCourtesy" +
                    ", \r\n            T.BirthDate AS Employees_BirthDate, \r\n            T.HireDate AS " +
                    "Employees_HireDate, \r\n            T.Address AS Employees_Address, \r\n            " +
                    "T.City AS Employees_City, \r\n            T.Region AS Employees_Region, \r\n        " +
                    "    T.PostalCode AS Employees_PostalCode, \r\n            T.Country AS Employees_C" +
                    "ountry, \r\n            T.HomePhone AS Employees_HomePhone, \r\n            T.Extens" +
                    "ion AS Employees_Extension, \r\n            T.Photo AS Employees_Photo, \r\n        " +
                    "    T.Notes AS Employees_Notes, \r\n            T.ReportsTo AS Employees_ReportsTo" +
                    ", \r\n            T.PhotoPath AS Employees_PhotoPath, \r\n            T.Location AS " +
                    "Employees_Location, \r\n            True AS _from0\r\n        FROM NorthwindEFContex" +
                    "t.Employees AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.Order Details
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView4()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.Order Details", @"
    SELECT VALUE -- Constructing Order Details
        [NorthwindEF.Store.Order Details](T1.[Order Details_OrderID], T1.[Order Details_ProductID], T1.[Order Details_UnitPrice], T1.[Order Details_Quantity], T1.[Order Details_Discount])
    FROM (
        SELECT 
            T.OrderID AS [Order Details_OrderID], 
            T.ProductID AS [Order Details_ProductID], 
            T.UnitPrice AS [Order Details_UnitPrice], 
            T.Quantity AS [Order Details_Quantity], 
            T.Discount AS [Order Details_Discount], 
            True AS _from0
        FROM NorthwindEFContext.Order_Details AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.Orders
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView5()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.Orders", @"
    SELECT VALUE -- Constructing Orders
        [NorthwindEF.Store.Orders](T1.Orders_OrderID, T1.Orders_CustomerID, T1.Orders_EmployeeID, T1.Orders_OrderDate, T1.Orders_RequiredDate, T1.Orders_ShippedDate, T1.Orders_ShipVia, T1.Orders_Freight, T1.Orders_ShipName, T1.Orders_ShipAddress, T1.Orders_ShipCity, T1.Orders_ShipRegion, T1.Orders_ShipPostalCode, T1.Orders_ShipCountry, T1.Orders_ShipLocation, T1.Orders_ContainerSize, T1.Orders_ShippingStatus)
    FROM (
        SELECT 
            T.OrderID AS Orders_OrderID, 
            T.CustomerID AS Orders_CustomerID, 
            T.EmployeeID AS Orders_EmployeeID, 
            T.OrderDate AS Orders_OrderDate, 
            T.RequiredDate AS Orders_RequiredDate, 
            T.ShippedDate AS Orders_ShippedDate, 
            T.ShipVia AS Orders_ShipVia, 
            T.Freight AS Orders_Freight, 
            T.ShipName AS Orders_ShipName, 
            T.ShipAddress AS Orders_ShipAddress, 
            T.ShipCity AS Orders_ShipCity, 
            T.ShipRegion AS Orders_ShipRegion, 
            T.ShipPostalCode AS Orders_ShipPostalCode, 
            T.ShipCountry AS Orders_ShipCountry, 
            T.ShipLocation AS Orders_ShipLocation, 
            T.ContainerSize AS Orders_ContainerSize, 
            T.ShippingStatus AS Orders_ShippingStatus, 
            True AS _from0
        FROM NorthwindEFContext.Orders AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.Products
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView6()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.Products", @"
    SELECT VALUE -- Constructing Products
        [NorthwindEF.Store.Products](T1.Products_ProductID, T1.Products_ProductName, T1.Products_SupplierID, T1.Products_CategoryID, T1.Products_QuantityPerUnit, T1.Products_UnitPrice, T1.Products_UnitsInStock, T1.Products_UnitsOnOrder, T1.Products_ReorderLevel, T1.Products_Discontinued, T1.Products_DiscontinuedDate)
    FROM (
        SELECT 
            T.ProductID AS Products_ProductID, 
            T.ProductName AS Products_ProductName, 
            T.SupplierID AS Products_SupplierID, 
            T.CategoryID AS Products_CategoryID, 
            T.QuantityPerUnit AS Products_QuantityPerUnit, 
            T.UnitPrice AS Products_UnitPrice, 
            T.UnitsInStock AS Products_UnitsInStock, 
            T.UnitsOnOrder AS Products_UnitsOnOrder, 
            T.ReorderLevel AS Products_ReorderLevel, 
            T.Discontinued AS Products_Discontinued, 
            T.DiscontinuedDate AS Products_DiscontinuedDate, 
            True AS _from0
        FROM NorthwindEFContext.Products AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.Region
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView7()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.Region", @"
    SELECT VALUE -- Constructing Region
        [NorthwindEF.Store.Region](T1.Region_RegionID, T1.Region_RegionDescription)
    FROM (
        SELECT 
            T.RegionID AS Region_RegionID, 
            T.RegionDescription AS Region_RegionDescription, 
            True AS _from0
        FROM NorthwindEFContext.Region AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.Shippers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView8()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.Shippers", @"
    SELECT VALUE -- Constructing Shippers
        [NorthwindEF.Store.Shippers](T1.Shippers_ShipperID, T1.Shippers_CompanyName, T1.Shippers_Phone)
    FROM (
        SELECT 
            T.ShipperID AS Shippers_ShipperID, 
            T.CompanyName AS Shippers_CompanyName, 
            T.Phone AS Shippers_Phone, 
            True AS _from0
        FROM NorthwindEFContext.Shippers AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.Suppliers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView9()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.Suppliers", @"
    SELECT VALUE -- Constructing Suppliers
        [NorthwindEF.Store.Suppliers](T1.Suppliers_SupplierID, T1.Suppliers_CompanyName, T1.Suppliers_ContactName, T1.Suppliers_ContactTitle, T1.Suppliers_Address, T1.Suppliers_City, T1.Suppliers_Region, T1.Suppliers_PostalCode, T1.Suppliers_Country, T1.Suppliers_Phone, T1.Suppliers_Fax, T1.Suppliers_HomePage, T1.Suppliers_Location)
    FROM (
        SELECT 
            T.SupplierID AS Suppliers_SupplierID, 
            T.CompanyName AS Suppliers_CompanyName, 
            T.ContactName AS Suppliers_ContactName, 
            T.ContactTitle AS Suppliers_ContactTitle, 
            T.Address AS Suppliers_Address, 
            T.City AS Suppliers_City, 
            T.Region AS Suppliers_Region, 
            T.PostalCode AS Suppliers_PostalCode, 
            T.Country AS Suppliers_Country, 
            T.Phone AS Suppliers_Phone, 
            T.Fax AS Suppliers_Fax, 
            T.HomePage AS Suppliers_HomePage, 
            T.Location AS Suppliers_Location, 
            True AS _from0
        FROM NorthwindEFContext.Suppliers AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.Territories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView10()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.Territories", @"
    SELECT VALUE -- Constructing Territories
        [NorthwindEF.Store.Territories](T1.Territories_TerritoryID, T1.Territories_TerritoryDescription, T1.Territories_RegionID)
    FROM (
        SELECT 
            T.TerritoryID AS Territories_TerritoryID, 
            T.TerritoryDescription AS Territories_TerritoryDescription, 
            T.RegionID AS Territories_RegionID, 
            True AS _from0
        FROM NorthwindEFContext.Territories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.CustomerCustomerDemo
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView11()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.CustomerCustomerDemo", @"
    SELECT VALUE -- Constructing CustomerCustomerDemo
        [NorthwindEF.Store.CustomerCustomerDemo](T1.CustomerCustomerDemo_CustomerID, T1.CustomerCustomerDemo_CustomerTypeID)
    FROM (
        SELECT 
            Key(T.Customers).CustomerID AS CustomerCustomerDemo_CustomerID, 
            Key(T.CustomerDemographics).CustomerTypeID AS CustomerCustomerDemo_CustomerTypeID, 
            True AS _from0
        FROM NorthwindEFContext.CustomerCustomerDemo AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.EmployeesTerritories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView12()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.EmployeesTerritories", @"
    SELECT VALUE -- Constructing EmployeesTerritories
        [NorthwindEF.Store.EmployeesTerritories](T1.EmployeesTerritories_EmployeeID, T1.EmployeesTerritories_TerritoryID)
    FROM (
        SELECT 
            Key(T.Employees).EmployeeID AS EmployeesTerritories_EmployeeID, 
            Key(T.Territories).TerritoryID AS EmployeesTerritories_TerritoryID, 
            True AS _from0
        FROM NorthwindEFContext.EmployeesTerritories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.Categories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView13()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.Categories", @"
    SELECT VALUE -- Constructing Categories
        [NorthwindEF.Categories](T1.Categories_CategoryID, T1.Categories_CategoryName, T1.Categories_Description, T1.Categories_Picture)
    FROM (
        SELECT 
            T.CategoryID AS Categories_CategoryID, 
            T.CategoryName AS Categories_CategoryName, 
            T.Description AS Categories_Description, 
            T.Picture AS Categories_Picture, 
            True AS _from0
        FROM NorthwindEFStoreContainer.Categories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.CustomerDemographics
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView14()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.CustomerDemographics", @"
    SELECT VALUE -- Constructing CustomerDemographics
        [NorthwindEF.CustomerDemographics](T1.CustomerDemographics_CustomerTypeID, T1.CustomerDemographics_CustomerDesc)
    FROM (
        SELECT 
            T.CustomerTypeID AS CustomerDemographics_CustomerTypeID, 
            T.CustomerDesc AS CustomerDemographics_CustomerDesc, 
            True AS _from0
        FROM NorthwindEFStoreContainer.CustomerDemographics AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.Customers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView15()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.Customers", @"
    SELECT VALUE -- Constructing Customers
        [NorthwindEF.Customers](T1.Customers_CustomerID, T1.Customers_CompanyName, T1.Customers_ContactName, T1.Customers_ContactTitle, T1.Customers_Address, T1.Customers_City, T1.Customers_Region, T1.Customers_PostalCode, T1.Customers_Country, T1.Customers_Phone, T1.Customers_Fax, T1.Customers_Location)
    FROM (
        SELECT 
            T.CustomerID AS Customers_CustomerID, 
            T.CompanyName AS Customers_CompanyName, 
            T.ContactName AS Customers_ContactName, 
            T.ContactTitle AS Customers_ContactTitle, 
            T.Address AS Customers_Address, 
            T.City AS Customers_City, 
            T.Region AS Customers_Region, 
            T.PostalCode AS Customers_PostalCode, 
            T.Country AS Customers_Country, 
            T.Phone AS Customers_Phone, 
            T.Fax AS Customers_Fax, 
            T.Location AS Customers_Location, 
            True AS _from0
        FROM NorthwindEFStoreContainer.Customers AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.Employees
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView16()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.Employees", "\r\n    SELECT VALUE -- Constructing Employees\r\n        [NorthwindEF.Employees](T1." +
                    "Employees_EmployeeID, T1.Employees_LastName, T1.Employees_FirstName, T1.Employee" +
                    "s_Title, T1.Employees_TitleOfCourtesy, T1.Employees_BirthDate, T1.Employees_Hire" +
                    "Date, T1.Employees_Address, T1.Employees_City, T1.Employees_Region, T1.Employees" +
                    "_PostalCode, T1.Employees_Country, T1.Employees_HomePhone, T1.Employees_Extensio" +
                    "n, T1.Employees_Photo, T1.Employees_Notes, T1.Employees_ReportsTo, T1.Employees_" +
                    "PhotoPath, T1.Employees_Location)\r\n    FROM (\r\n        SELECT \r\n            T.Em" +
                    "ployeeID AS Employees_EmployeeID, \r\n            T.LastName AS Employees_LastName" +
                    ", \r\n            T.FirstName AS Employees_FirstName, \r\n            T.Title AS Emp" +
                    "loyees_Title, \r\n            T.TitleOfCourtesy AS Employees_TitleOfCourtesy, \r\n  " +
                    "          T.BirthDate AS Employees_BirthDate, \r\n            T.HireDate AS Employ" +
                    "ees_HireDate, \r\n            T.Address AS Employees_Address, \r\n            T.City" +
                    " AS Employees_City, \r\n            T.Region AS Employees_Region, \r\n            T." +
                    "PostalCode AS Employees_PostalCode, \r\n            T.Country AS Employees_Country" +
                    ", \r\n            T.HomePhone AS Employees_HomePhone, \r\n            T.Extension AS" +
                    " Employees_Extension, \r\n            T.Photo AS Employees_Photo, \r\n            T." +
                    "Notes AS Employees_Notes, \r\n            T.ReportsTo AS Employees_ReportsTo, \r\n  " +
                    "          T.PhotoPath AS Employees_PhotoPath, \r\n            T.Location AS Employ" +
                    "ees_Location, \r\n            True AS _from0\r\n        FROM NorthwindEFStoreContain" +
                    "er.Employees AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.Order_Details
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView17()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.Order_Details", @"
    SELECT VALUE -- Constructing Order_Details
        [NorthwindEF.Order_Details](T1.[Order_Details.OrderID], T1.[Order_Details.ProductID], T1.[Order_Details.UnitPrice], T1.[Order_Details.Quantity], T1.[Order_Details.Discount])
    FROM (
        SELECT 
            T.OrderID AS [Order_Details.OrderID], 
            T.ProductID AS [Order_Details.ProductID], 
            T.UnitPrice AS [Order_Details.UnitPrice], 
            T.Quantity AS [Order_Details.Quantity], 
            T.Discount AS [Order_Details.Discount], 
            True AS _from0
        FROM NorthwindEFStoreContainer.[Order Details] AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.Orders
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView18()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.Orders", @"
    SELECT VALUE -- Constructing Orders
        [NorthwindEF.Orders](T1.Orders_OrderID, T1.Orders_CustomerID, T1.Orders_EmployeeID, T1.Orders_OrderDate, T1.Orders_RequiredDate, T1.Orders_ShippedDate, T1.Orders_ShipVia, T1.Orders_Freight, T1.Orders_ShipName, T1.Orders_ShipAddress, T1.Orders_ShipCity, T1.Orders_ShipRegion, T1.Orders_ShipPostalCode, T1.Orders_ShipCountry, T1.Orders_ShipLocation, T1.Orders_ContainerSize, T1.Orders_ShippingStatus)
    FROM (
        SELECT 
            T.OrderID AS Orders_OrderID, 
            T.CustomerID AS Orders_CustomerID, 
            T.EmployeeID AS Orders_EmployeeID, 
            T.OrderDate AS Orders_OrderDate, 
            T.RequiredDate AS Orders_RequiredDate, 
            T.ShippedDate AS Orders_ShippedDate, 
            T.ShipVia AS Orders_ShipVia, 
            T.Freight AS Orders_Freight, 
            T.ShipName AS Orders_ShipName, 
            T.ShipAddress AS Orders_ShipAddress, 
            T.ShipCity AS Orders_ShipCity, 
            T.ShipRegion AS Orders_ShipRegion, 
            T.ShipPostalCode AS Orders_ShipPostalCode, 
            T.ShipCountry AS Orders_ShipCountry, 
            T.ShipLocation AS Orders_ShipLocation, 
            T.ContainerSize AS Orders_ContainerSize, 
            T.ShippingStatus AS Orders_ShippingStatus, 
            True AS _from0
        FROM NorthwindEFStoreContainer.Orders AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.Products
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView19()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.Products", @"
    SELECT VALUE -- Constructing Products
        [NorthwindEF.Products](T1.Products_ProductID, T1.Products_ProductName, T1.Products_SupplierID, T1.Products_CategoryID, T1.Products_QuantityPerUnit, T1.Products_UnitPrice, T1.Products_UnitsInStock, T1.Products_UnitsOnOrder, T1.Products_ReorderLevel, T1.Products_Discontinued, T1.Products_DiscontinuedDate)
    FROM (
        SELECT 
            T.ProductID AS Products_ProductID, 
            T.ProductName AS Products_ProductName, 
            T.SupplierID AS Products_SupplierID, 
            T.CategoryID AS Products_CategoryID, 
            T.QuantityPerUnit AS Products_QuantityPerUnit, 
            T.UnitPrice AS Products_UnitPrice, 
            T.UnitsInStock AS Products_UnitsInStock, 
            T.UnitsOnOrder AS Products_UnitsOnOrder, 
            T.ReorderLevel AS Products_ReorderLevel, 
            T.Discontinued AS Products_Discontinued, 
            T.DiscontinuedDate AS Products_DiscontinuedDate, 
            True AS _from0
        FROM NorthwindEFStoreContainer.Products AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.Region
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView20()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.Region", @"
    SELECT VALUE -- Constructing Region
        [NorthwindEF.Region](T1.Region_RegionID, T1.Region_RegionDescription)
    FROM (
        SELECT 
            T.RegionID AS Region_RegionID, 
            T.RegionDescription AS Region_RegionDescription, 
            True AS _from0
        FROM NorthwindEFStoreContainer.Region AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.Shippers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView21()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.Shippers", @"
    SELECT VALUE -- Constructing Shippers
        [NorthwindEF.Shippers](T1.Shippers_ShipperID, T1.Shippers_CompanyName, T1.Shippers_Phone)
    FROM (
        SELECT 
            T.ShipperID AS Shippers_ShipperID, 
            T.CompanyName AS Shippers_CompanyName, 
            T.Phone AS Shippers_Phone, 
            True AS _from0
        FROM NorthwindEFStoreContainer.Shippers AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.Suppliers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView22()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.Suppliers", @"
    SELECT VALUE -- Constructing Suppliers
        [NorthwindEF.Suppliers](T1.Suppliers_SupplierID, T1.Suppliers_CompanyName, T1.Suppliers_ContactName, T1.Suppliers_ContactTitle, T1.Suppliers_Address, T1.Suppliers_City, T1.Suppliers_Region, T1.Suppliers_PostalCode, T1.Suppliers_Country, T1.Suppliers_Phone, T1.Suppliers_Fax, T1.Suppliers_HomePage, T1.Suppliers_Location)
    FROM (
        SELECT 
            T.SupplierID AS Suppliers_SupplierID, 
            T.CompanyName AS Suppliers_CompanyName, 
            T.ContactName AS Suppliers_ContactName, 
            T.ContactTitle AS Suppliers_ContactTitle, 
            T.Address AS Suppliers_Address, 
            T.City AS Suppliers_City, 
            T.Region AS Suppliers_Region, 
            T.PostalCode AS Suppliers_PostalCode, 
            T.Country AS Suppliers_Country, 
            T.Phone AS Suppliers_Phone, 
            T.Fax AS Suppliers_Fax, 
            T.HomePage AS Suppliers_HomePage, 
            T.Location AS Suppliers_Location, 
            True AS _from0
        FROM NorthwindEFStoreContainer.Suppliers AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.Territories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView23()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.Territories", @"
    SELECT VALUE -- Constructing Territories
        [NorthwindEF.Territories](T1.Territories_TerritoryID, T1.Territories_TerritoryDescription, T1.Territories_RegionID)
    FROM (
        SELECT 
            T.TerritoryID AS Territories_TerritoryID, 
            T.TerritoryDescription AS Territories_TerritoryDescription, 
            T.RegionID AS Territories_RegionID, 
            True AS _from0
        FROM NorthwindEFStoreContainer.Territories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.CustomerCustomerDemo
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView24()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.CustomerCustomerDemo", @"
    SELECT VALUE -- Constructing CustomerCustomerDemo
        [NorthwindEF.CustomerCustomerDemo](T3.CustomerCustomerDemo_CustomerDemographics, T3.CustomerCustomerDemo_Customers)
    FROM (
        SELECT -- Constructing CustomerDemographics
            CreateRef(NorthwindEFContext.CustomerDemographics, row(T2.CustomerCustomerDemo_CustomerDemographics_CustomerTypeID), [NorthwindEF.CustomerDemographics]) AS CustomerCustomerDemo_CustomerDemographics, 
            T2.CustomerCustomerDemo_Customers
        FROM (
            SELECT -- Constructing Customers
                T1.CustomerCustomerDemo_CustomerDemographics_CustomerTypeID, 
                CreateRef(NorthwindEFContext.Customers, row(T1.CustomerCustomerDemo_Customers_CustomerID), [NorthwindEF.Customers]) AS CustomerCustomerDemo_Customers
            FROM (
                SELECT 
                    T.CustomerTypeID AS CustomerCustomerDemo_CustomerDemographics_CustomerTypeID, 
                    T.CustomerID AS CustomerCustomerDemo_Customers_CustomerID, 
                    True AS _from0
                FROM NorthwindEFStoreContainer.CustomerCustomerDemo AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.EmployeesTerritories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView25()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.EmployeesTerritories", @"
    SELECT VALUE -- Constructing EmployeesTerritories
        [NorthwindEF.EmployeesTerritories](T3.EmployeesTerritories_Employees, T3.EmployeesTerritories_Territories)
    FROM (
        SELECT -- Constructing Employees
            CreateRef(NorthwindEFContext.Employees, row(T2.EmployeesTerritories_Employees_EmployeeID), [NorthwindEF.Employees]) AS EmployeesTerritories_Employees, 
            T2.EmployeesTerritories_Territories
        FROM (
            SELECT -- Constructing Territories
                T1.EmployeesTerritories_Employees_EmployeeID, 
                CreateRef(NorthwindEFContext.Territories, row(T1.EmployeesTerritories_Territories_TerritoryID), [NorthwindEF.Territories]) AS EmployeesTerritories_Territories
            FROM (
                SELECT 
                    T.EmployeeID AS EmployeesTerritories_Employees_EmployeeID, 
                    T.TerritoryID AS EmployeesTerritories_Territories_TerritoryID, 
                    True AS _from0
                FROM NorthwindEFStoreContainer.EmployeesTerritories AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.InternationalOrders
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView26()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.InternationalOrders", @"
    SELECT VALUE -- Constructing InternationalOrders
        [NorthwindEF.Store.InternationalOrders](T1.InternationalOrders_OrderID, T1.InternationalOrders_CustomsDescription, T1.InternationalOrders_ExciseTax)
    FROM (
        SELECT 
            T.OrderID AS InternationalOrders_OrderID, 
            T.CustomsDescription AS InternationalOrders_CustomsDescription, 
            T.ExciseTax AS InternationalOrders_ExciseTax, 
            True AS _from0
        FROM NorthwindEFContext.InternationalOrders AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.InternationalOrders
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView27()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.InternationalOrders", @"
    SELECT VALUE -- Constructing InternationalOrders
        [NorthwindEF.InternationalOrders](T1.InternationalOrders_OrderID, T1.InternationalOrders_CustomsDescription, T1.InternationalOrders_ExciseTax)
    FROM (
        SELECT 
            T.OrderID AS InternationalOrders_OrderID, 
            T.CustomsDescription AS InternationalOrders_CustomsDescription, 
            T.ExciseTax AS InternationalOrders_ExciseTax, 
            True AS _from0
        FROM NorthwindEFStoreContainer.InternationalOrders AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.OrderDetails
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView28()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.OrderDetails", @"
    SELECT VALUE -- Constructing OrderDetails
        [NorthwindEF.Store.OrderDetails](T1.OrderDetails_OrderID, T1.OrderDetails_ProductID, T1.OrderDetails_UnitPrice, T1.OrderDetails_Quantity, T1.OrderDetails_Discount)
    FROM (
        SELECT 
            T.OrderID AS OrderDetails_OrderID, 
            T.ProductID AS OrderDetails_ProductID, 
            T.UnitPrice AS OrderDetails_UnitPrice, 
            T.Quantity AS OrderDetails_Quantity, 
            T.Discount AS OrderDetails_Discount, 
            True AS _from0
        FROM NorthwindEFContext.OrderDetails AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.OrderDetails
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView29()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.OrderDetails", @"
    SELECT VALUE -- Constructing OrderDetails
        [NorthwindEF.OrderDetails](T1.OrderDetails_OrderID, T1.OrderDetails_ProductID, T1.OrderDetails_UnitPrice, T1.OrderDetails_Quantity, T1.OrderDetails_Discount)
    FROM (
        SELECT 
            T.OrderID AS OrderDetails_OrderID, 
            T.ProductID AS OrderDetails_ProductID, 
            T.UnitPrice AS OrderDetails_UnitPrice, 
            T.Quantity AS OrderDetails_Quantity, 
            T.Discount AS OrderDetails_Discount, 
            True AS _from0
        FROM NorthwindEFStoreContainer.OrderDetails AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.PreviousEmployees
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView30()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.PreviousEmployees", "\r\n    SELECT VALUE -- Constructing PreviousEmployees\r\n        [NorthwindEF.Store." +
                    "PreviousEmployees](T1.PreviousEmployees_EmployeeID, T1.PreviousEmployees_LastNam" +
                    "e, T1.PreviousEmployees_FirstName, T1.PreviousEmployees_Title, T1.PreviousEmploy" +
                    "ees_TitleOfCourtesy, T1.PreviousEmployees_BirthDate, T1.PreviousEmployees_HireDa" +
                    "te, T1.PreviousEmployees_Address, T1.PreviousEmployees_City, T1.PreviousEmployee" +
                    "s_Region, T1.PreviousEmployees_PostalCode, T1.PreviousEmployees_Country, T1.Prev" +
                    "iousEmployees_HomePhone, T1.PreviousEmployees_Extension, T1.PreviousEmployees_Ph" +
                    "oto, T1.PreviousEmployees_Notes, T1.PreviousEmployees_PhotoPath, T1.PreviousEmpl" +
                    "oyees_Location)\r\n    FROM (\r\n        SELECT \r\n            T.EmployeeID AS Previo" +
                    "usEmployees_EmployeeID, \r\n            T.LastName AS PreviousEmployees_LastName, " +
                    "\r\n            T.FirstName AS PreviousEmployees_FirstName, \r\n            T.Title " +
                    "AS PreviousEmployees_Title, \r\n            T.TitleOfCourtesy AS PreviousEmployees" +
                    "_TitleOfCourtesy, \r\n            T.BirthDate AS PreviousEmployees_BirthDate, \r\n  " +
                    "          T.HireDate AS PreviousEmployees_HireDate, \r\n            T.Address AS P" +
                    "reviousEmployees_Address, \r\n            T.City AS PreviousEmployees_City, \r\n    " +
                    "        T.Region AS PreviousEmployees_Region, \r\n            T.PostalCode AS Prev" +
                    "iousEmployees_PostalCode, \r\n            T.Country AS PreviousEmployees_Country, " +
                    "\r\n            T.HomePhone AS PreviousEmployees_HomePhone, \r\n            T.Extens" +
                    "ion AS PreviousEmployees_Extension, \r\n            T.Photo AS PreviousEmployees_P" +
                    "hoto, \r\n            T.Notes AS PreviousEmployees_Notes, \r\n            T.PhotoPat" +
                    "h AS PreviousEmployees_PhotoPath, \r\n            T.Location AS PreviousEmployees_" +
                    "Location, \r\n            True AS _from0\r\n        FROM NorthwindEFContext.Previous" +
                    "Employees AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.PreviousEmployees
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView31()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.PreviousEmployees", "\r\n    SELECT VALUE -- Constructing PreviousEmployees\r\n        [NorthwindEF.Previo" +
                    "usEmployees](T1.PreviousEmployees_EmployeeID, T1.PreviousEmployees_LastName, T1." +
                    "PreviousEmployees_FirstName, T1.PreviousEmployees_Title, T1.PreviousEmployees_Ti" +
                    "tleOfCourtesy, T1.PreviousEmployees_BirthDate, T1.PreviousEmployees_HireDate, T1" +
                    ".PreviousEmployees_Address, T1.PreviousEmployees_City, T1.PreviousEmployees_Regi" +
                    "on, T1.PreviousEmployees_PostalCode, T1.PreviousEmployees_Country, T1.PreviousEm" +
                    "ployees_HomePhone, T1.PreviousEmployees_Extension, T1.PreviousEmployees_Photo, T" +
                    "1.PreviousEmployees_Notes, T1.PreviousEmployees_PhotoPath, T1.PreviousEmployees_" +
                    "Location)\r\n    FROM (\r\n        SELECT \r\n            T.EmployeeID AS PreviousEmpl" +
                    "oyees_EmployeeID, \r\n            T.LastName AS PreviousEmployees_LastName, \r\n    " +
                    "        T.FirstName AS PreviousEmployees_FirstName, \r\n            T.Title AS Pre" +
                    "viousEmployees_Title, \r\n            T.TitleOfCourtesy AS PreviousEmployees_Title" +
                    "OfCourtesy, \r\n            T.BirthDate AS PreviousEmployees_BirthDate, \r\n        " +
                    "    T.HireDate AS PreviousEmployees_HireDate, \r\n            T.Address AS Previou" +
                    "sEmployees_Address, \r\n            T.City AS PreviousEmployees_City, \r\n          " +
                    "  T.Region AS PreviousEmployees_Region, \r\n            T.PostalCode AS PreviousEm" +
                    "ployees_PostalCode, \r\n            T.Country AS PreviousEmployees_Country, \r\n    " +
                    "        T.HomePhone AS PreviousEmployees_HomePhone, \r\n            T.Extension AS" +
                    " PreviousEmployees_Extension, \r\n            T.Photo AS PreviousEmployees_Photo, " +
                    "\r\n            T.Notes AS PreviousEmployees_Notes, \r\n            T.PhotoPath AS P" +
                    "reviousEmployees_PhotoPath, \r\n            T.Location AS PreviousEmployees_Locati" +
                    "on, \r\n            True AS _from0\r\n        FROM NorthwindEFStoreContainer.Previou" +
                    "sEmployees AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.Alphabetical list of products
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView32()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.Alphabetical list of products", "\r\n    SELECT VALUE -- Constructing Alphabetical list of products\r\n        [Northw" +
                    "indEF.Store.Alphabetical list of products](T1.[Alphabetical list of products_Pro" +
                    "ductID], T1.[Alphabetical list of products_ProductName], T1.[Alphabetical list o" +
                    "f products_SupplierID], T1.[Alphabetical list of products_CategoryID], T1.[Alpha" +
                    "betical list of products_QuantityPerUnit], T1.[Alphabetical list of products_Uni" +
                    "tPrice], T1.[Alphabetical list of products_UnitsInStock], T1.[Alphabetical list " +
                    "of products_UnitsOnOrder], T1.[Alphabetical list of products_ReorderLevel], T1.[" +
                    "Alphabetical list of products_Discontinued], T1.[Alphabetical list of products_D" +
                    "iscontinuedDate], T1.[Alphabetical list of products_CategoryName])\r\n    FROM (\r\n" +
                    "        SELECT \r\n            T.ProductID AS [Alphabetical list of products_Produ" +
                    "ctID], \r\n            T.ProductName AS [Alphabetical list of products_ProductName" +
                    "], \r\n            T.SupplierID AS [Alphabetical list of products_SupplierID], \r\n " +
                    "           T.CategoryID AS [Alphabetical list of products_CategoryID], \r\n       " +
                    "     T.QuantityPerUnit AS [Alphabetical list of products_QuantityPerUnit], \r\n   " +
                    "         T.UnitPrice AS [Alphabetical list of products_UnitPrice], \r\n           " +
                    " T.UnitsInStock AS [Alphabetical list of products_UnitsInStock], \r\n            T" +
                    ".UnitsOnOrder AS [Alphabetical list of products_UnitsOnOrder], \r\n            T.R" +
                    "eorderLevel AS [Alphabetical list of products_ReorderLevel], \r\n            T.Dis" +
                    "continued AS [Alphabetical list of products_Discontinued], \r\n            T.Disco" +
                    "ntinuedDate AS [Alphabetical list of products_DiscontinuedDate], \r\n            T" +
                    ".CategoryName AS [Alphabetical list of products_CategoryName], \r\n            Tru" +
                    "e AS _from0\r\n        FROM NorthwindEFContext.Alphabetical_list_of_products AS T\r" +
                    "\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.Alphabetical_list_of_products
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView33()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.Alphabetical_list_of_products", "\r\n    SELECT VALUE -- Constructing Alphabetical_list_of_products\r\n        [Northw" +
                    "indEF.Alphabetical_list_of_products](T1.[Alphabetical_list_of_products.ProductID" +
                    "], T1.[Alphabetical_list_of_products.ProductName], T1.[Alphabetical_list_of_prod" +
                    "ucts.SupplierID], T1.[Alphabetical_list_of_products.CategoryID], T1.[Alphabetica" +
                    "l_list_of_products.QuantityPerUnit], T1.[Alphabetical_list_of_products.UnitPrice" +
                    "], T1.[Alphabetical_list_of_products.UnitsInStock], T1.[Alphabetical_list_of_pro" +
                    "ducts.UnitsOnOrder], T1.[Alphabetical_list_of_products.ReorderLevel], T1.[Alphab" +
                    "etical_list_of_products.Discontinued], T1.[Alphabetical_list_of_products.Discont" +
                    "inuedDate], T1.[Alphabetical_list_of_products.CategoryName])\r\n    FROM (\r\n      " +
                    "  SELECT \r\n            T.ProductID AS [Alphabetical_list_of_products.ProductID]," +
                    " \r\n            T.ProductName AS [Alphabetical_list_of_products.ProductName], \r\n " +
                    "           T.SupplierID AS [Alphabetical_list_of_products.SupplierID], \r\n       " +
                    "     T.CategoryID AS [Alphabetical_list_of_products.CategoryID], \r\n            T" +
                    ".QuantityPerUnit AS [Alphabetical_list_of_products.QuantityPerUnit], \r\n         " +
                    "   T.UnitPrice AS [Alphabetical_list_of_products.UnitPrice], \r\n            T.Uni" +
                    "tsInStock AS [Alphabetical_list_of_products.UnitsInStock], \r\n            T.Units" +
                    "OnOrder AS [Alphabetical_list_of_products.UnitsOnOrder], \r\n            T.Reorder" +
                    "Level AS [Alphabetical_list_of_products.ReorderLevel], \r\n            T.Discontin" +
                    "ued AS [Alphabetical_list_of_products.Discontinued], \r\n            T.Discontinue" +
                    "dDate AS [Alphabetical_list_of_products.DiscontinuedDate], \r\n            T.Categ" +
                    "oryName AS [Alphabetical_list_of_products.CategoryName], \r\n            True AS _" +
                    "from0\r\n        FROM NorthwindEFStoreContainer.[Alphabetical list of products] AS" +
                    " T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.Category Sales for 1997
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView34()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.Category Sales for 1997", @"
    SELECT VALUE -- Constructing Category Sales for 1997
        [NorthwindEF.Store.Category Sales for 1997](T1.[Category Sales for 1997_CategoryName], T1.[Category Sales for 1997_CategorySales])
    FROM (
        SELECT 
            T.CategoryName AS [Category Sales for 1997_CategoryName], 
            T.CategorySales AS [Category Sales for 1997_CategorySales], 
            True AS _from0
        FROM NorthwindEFContext.Category_Sales_for_1997 AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.Category_Sales_for_1997
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView35()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.Category_Sales_for_1997", @"
    SELECT VALUE -- Constructing Category_Sales_for_1997
        [NorthwindEF.Category_Sales_for_1997](T1.[Category_Sales_for_1997.CategoryName], T1.[Category_Sales_for_1997.CategorySales])
    FROM (
        SELECT 
            T.CategoryName AS [Category_Sales_for_1997.CategoryName], 
            T.CategorySales AS [Category_Sales_for_1997.CategorySales], 
            True AS _from0
        FROM NorthwindEFStoreContainer.[Category Sales for 1997] AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.Current Product List
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView36()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.Current Product List", @"
    SELECT VALUE -- Constructing Current Product List
        [NorthwindEF.Store.Current Product List](T1.[Current Product List_ProductID], T1.[Current Product List_ProductName])
    FROM (
        SELECT 
            T.ProductID AS [Current Product List_ProductID], 
            T.ProductName AS [Current Product List_ProductName], 
            True AS _from0
        FROM NorthwindEFContext.Current_Product_List AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.Current_Product_List
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView37()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.Current_Product_List", @"
    SELECT VALUE -- Constructing Current_Product_List
        [NorthwindEF.Current_Product_List](T1.[Current_Product_List.ProductID], T1.[Current_Product_List.ProductName])
    FROM (
        SELECT 
            T.ProductID AS [Current_Product_List.ProductID], 
            T.ProductName AS [Current_Product_List.ProductName], 
            True AS _from0
        FROM NorthwindEFStoreContainer.[Current Product List] AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.Customer and Suppliers by City
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView38()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.Customer and Suppliers by City", @"
    SELECT VALUE -- Constructing Customer and Suppliers by City
        [NorthwindEF.Store.Customer and Suppliers by City](T1.[Customer and Suppliers by City_City], T1.[Customer and Suppliers by City_CompanyName], T1.[Customer and Suppliers by City_ContactName], T1.[Customer and Suppliers by City_Relationship])
    FROM (
        SELECT 
            T.City AS [Customer and Suppliers by City_City], 
            T.CompanyName AS [Customer and Suppliers by City_CompanyName], 
            T.ContactName AS [Customer and Suppliers by City_ContactName], 
            T.[Relationship] AS [Customer and Suppliers by City_Relationship], 
            True AS _from0
        FROM NorthwindEFContext.Customer_and_Suppliers_by_City AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.Customer_and_Suppliers_by_City
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView39()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.Customer_and_Suppliers_by_City", @"
    SELECT VALUE -- Constructing Customer_and_Suppliers_by_City
        [NorthwindEF.Customer_and_Suppliers_by_City](T1.[Customer_and_Suppliers_by_City.City], T1.[Customer_and_Suppliers_by_City.CompanyName], T1.[Customer_and_Suppliers_by_City.ContactName], T1.[Customer_and_Suppliers_by_City.Relationship])
    FROM (
        SELECT 
            T.City AS [Customer_and_Suppliers_by_City.City], 
            T.CompanyName AS [Customer_and_Suppliers_by_City.CompanyName], 
            T.ContactName AS [Customer_and_Suppliers_by_City.ContactName], 
            T.[Relationship] AS [Customer_and_Suppliers_by_City.Relationship], 
            True AS _from0
        FROM NorthwindEFStoreContainer.[Customer and Suppliers by City] AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.Invoices
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView40()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2100);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Invoices\r\n        [NorthwindEF.Store.Invoices");
            viewString.Append("](T1.Invoices_ShipName, T1.Invoices_ShipAddress, T1.Invoices_ShipCity, T1.Invoic");
            viewString.Append("es_ShipRegion, T1.Invoices_ShipPostalCode, T1.Invoices_ShipCountry, T1.Invoices_");
            viewString.Append("CustomerID, T1.Invoices_CustomerName, T1.Invoices_Address, T1.Invoices_City, T1.");
            viewString.Append("Invoices_Region, T1.Invoices_PostalCode, T1.Invoices_Country, T1.Invoices_Salesp");
            viewString.Append("erson, T1.Invoices_OrderID, T1.Invoices_OrderDate, T1.Invoices_RequiredDate, T1.");
            viewString.Append("Invoices_ShippedDate, T1.Invoices_ShipperName, T1.Invoices_ProductID, T1.Invoice");
            viewString.Append("s_ProductName, T1.Invoices_UnitPrice, T1.Invoices_Quantity, T1.Invoices_Discount");
            viewString.Append(", T1.Invoices_ExtendedPrice, T1.Invoices_Freight)\r\n    FROM (\r\n        SELECT \r\n");
            viewString.Append("            T.ShipName AS Invoices_ShipName, \r\n            T.ShipAddress AS Invo");
            viewString.Append("ices_ShipAddress, \r\n            T.ShipCity AS Invoices_ShipCity, \r\n            T");
            viewString.Append(".ShipRegion AS Invoices_ShipRegion, \r\n            T.ShipPostalCode AS Invoices_S");
            viewString.Append("hipPostalCode, \r\n            T.ShipCountry AS Invoices_ShipCountry, \r\n          ");
            viewString.Append("  T.CustomerID AS Invoices_CustomerID, \r\n            T.CustomerName AS Invoices_");
            viewString.Append("CustomerName, \r\n            T.Address AS Invoices_Address, \r\n            T.City ");
            viewString.Append("AS Invoices_City, \r\n            T.Region AS Invoices_Region, \r\n            T.Pos");
            viewString.Append("talCode AS Invoices_PostalCode, \r\n            T.Country AS Invoices_Country, \r\n ");
            viewString.Append("           T.Salesperson AS Invoices_Salesperson, \r\n            T.OrderID AS Inv");
            viewString.Append("oices_OrderID, \r\n            T.OrderDate AS Invoices_OrderDate, \r\n            T.");
            viewString.Append("RequiredDate AS Invoices_RequiredDate, \r\n            T.ShippedDate AS Invoices_S");
            viewString.Append("hippedDate, \r\n            T.ShipperName AS Invoices_ShipperName, \r\n            T");
            viewString.Append(".ProductID AS Invoices_ProductID, \r\n            T.ProductName AS Invoices_Produc");
            viewString.Append("tName, \r\n            T.UnitPrice AS Invoices_UnitPrice, \r\n            T.Quantity");
            viewString.Append(" AS Invoices_Quantity, \r\n            T.Discount AS Invoices_Discount, \r\n        ");
            viewString.Append("    T.ExtendedPrice AS Invoices_ExtendedPrice, \r\n            T.Freight AS Invoic");
            viewString.Append("es_Freight, \r\n            True AS _from0\r\n        FROM NorthwindEFContext.Invoic");
            viewString.Append("es AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.Invoices", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.Invoices
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView41()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2101);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Invoices\r\n        [NorthwindEF.Invoices](T1.I");
            viewString.Append("nvoices_ShipName, T1.Invoices_ShipAddress, T1.Invoices_ShipCity, T1.Invoices_Shi");
            viewString.Append("pRegion, T1.Invoices_ShipPostalCode, T1.Invoices_ShipCountry, T1.Invoices_Custom");
            viewString.Append("erID, T1.Invoices_CustomerName, T1.Invoices_Address, T1.Invoices_City, T1.Invoic");
            viewString.Append("es_Region, T1.Invoices_PostalCode, T1.Invoices_Country, T1.Invoices_Salesperson,");
            viewString.Append(" T1.Invoices_OrderID, T1.Invoices_OrderDate, T1.Invoices_RequiredDate, T1.Invoic");
            viewString.Append("es_ShippedDate, T1.Invoices_ShipperName, T1.Invoices_ProductID, T1.Invoices_Prod");
            viewString.Append("uctName, T1.Invoices_UnitPrice, T1.Invoices_Quantity, T1.Invoices_Discount, T1.I");
            viewString.Append("nvoices_ExtendedPrice, T1.Invoices_Freight)\r\n    FROM (\r\n        SELECT \r\n      ");
            viewString.Append("      T.ShipName AS Invoices_ShipName, \r\n            T.ShipAddress AS Invoices_S");
            viewString.Append("hipAddress, \r\n            T.ShipCity AS Invoices_ShipCity, \r\n            T.ShipR");
            viewString.Append("egion AS Invoices_ShipRegion, \r\n            T.ShipPostalCode AS Invoices_ShipPos");
            viewString.Append("talCode, \r\n            T.ShipCountry AS Invoices_ShipCountry, \r\n            T.Cu");
            viewString.Append("stomerID AS Invoices_CustomerID, \r\n            T.CustomerName AS Invoices_Custom");
            viewString.Append("erName, \r\n            T.Address AS Invoices_Address, \r\n            T.City AS Inv");
            viewString.Append("oices_City, \r\n            T.Region AS Invoices_Region, \r\n            T.PostalCod");
            viewString.Append("e AS Invoices_PostalCode, \r\n            T.Country AS Invoices_Country, \r\n       ");
            viewString.Append("     T.Salesperson AS Invoices_Salesperson, \r\n            T.OrderID AS Invoices_");
            viewString.Append("OrderID, \r\n            T.OrderDate AS Invoices_OrderDate, \r\n            T.Requir");
            viewString.Append("edDate AS Invoices_RequiredDate, \r\n            T.ShippedDate AS Invoices_Shipped");
            viewString.Append("Date, \r\n            T.ShipperName AS Invoices_ShipperName, \r\n            T.Produ");
            viewString.Append("ctID AS Invoices_ProductID, \r\n            T.ProductName AS Invoices_ProductName,");
            viewString.Append(" \r\n            T.UnitPrice AS Invoices_UnitPrice, \r\n            T.Quantity AS In");
            viewString.Append("voices_Quantity, \r\n            T.Discount AS Invoices_Discount, \r\n            T.");
            viewString.Append("ExtendedPrice AS Invoices_ExtendedPrice, \r\n            T.Freight AS Invoices_Fre");
            viewString.Append("ight, \r\n            True AS _from0\r\n        FROM NorthwindEFStoreContainer.Invoi");
            viewString.Append("ces AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.Invoices", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.Order Details Extended
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView42()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.Order Details Extended", @"
    SELECT VALUE -- Constructing Order Details Extended
        [NorthwindEF.Store.Order Details Extended](T1.[Order Details Extended_OrderID], T1.[Order Details Extended_ProductID], T1.[Order Details Extended_ProductName], T1.[Order Details Extended_UnitPrice], T1.[Order Details Extended_Quantity], T1.[Order Details Extended_Discount], T1.[Order Details Extended_ExtendedPrice])
    FROM (
        SELECT 
            T.OrderID AS [Order Details Extended_OrderID], 
            T.ProductID AS [Order Details Extended_ProductID], 
            T.ProductName AS [Order Details Extended_ProductName], 
            T.UnitPrice AS [Order Details Extended_UnitPrice], 
            T.Quantity AS [Order Details Extended_Quantity], 
            T.Discount AS [Order Details Extended_Discount], 
            T.ExtendedPrice AS [Order Details Extended_ExtendedPrice], 
            True AS _from0
        FROM NorthwindEFContext.Order_Details_Extended AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.Order_Details_Extended
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView43()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.Order_Details_Extended", @"
    SELECT VALUE -- Constructing Order_Details_Extended
        [NorthwindEF.Order_Details_Extended](T1.[Order_Details_Extended.OrderID], T1.[Order_Details_Extended.ProductID], T1.[Order_Details_Extended.ProductName], T1.[Order_Details_Extended.UnitPrice], T1.[Order_Details_Extended.Quantity], T1.[Order_Details_Extended.Discount], T1.[Order_Details_Extended.ExtendedPrice])
    FROM (
        SELECT 
            T.OrderID AS [Order_Details_Extended.OrderID], 
            T.ProductID AS [Order_Details_Extended.ProductID], 
            T.ProductName AS [Order_Details_Extended.ProductName], 
            T.UnitPrice AS [Order_Details_Extended.UnitPrice], 
            T.Quantity AS [Order_Details_Extended.Quantity], 
            T.Discount AS [Order_Details_Extended.Discount], 
            T.ExtendedPrice AS [Order_Details_Extended.ExtendedPrice], 
            True AS _from0
        FROM NorthwindEFStoreContainer.[Order Details Extended] AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.Order Subtotals
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView44()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.Order Subtotals", @"
    SELECT VALUE -- Constructing Order Subtotals
        [NorthwindEF.Store.Order Subtotals](T1.[Order Subtotals_OrderID], T1.[Order Subtotals_Subtotal])
    FROM (
        SELECT 
            T.OrderID AS [Order Subtotals_OrderID], 
            T.Subtotal AS [Order Subtotals_Subtotal], 
            True AS _from0
        FROM NorthwindEFContext.Order_Subtotals AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.Order_Subtotals
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView45()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.Order_Subtotals", @"
    SELECT VALUE -- Constructing Order_Subtotals
        [NorthwindEF.Order_Subtotals](T1.[Order_Subtotals.OrderID], T1.[Order_Subtotals.Subtotal])
    FROM (
        SELECT 
            T.OrderID AS [Order_Subtotals.OrderID], 
            T.Subtotal AS [Order_Subtotals.Subtotal], 
            True AS _from0
        FROM NorthwindEFStoreContainer.[Order Subtotals] AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.Orders Qry
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView46()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.Orders Qry", "\r\n    SELECT VALUE -- Constructing Orders Qry\r\n        [NorthwindEF.Store.Orders " +
                    "Qry](T1.[Orders Qry_OrderID], T1.[Orders Qry_CustomerID], T1.[Orders Qry_Employe" +
                    "eID], T1.[Orders Qry_OrderDate], T1.[Orders Qry_RequiredDate], T1.[Orders Qry_Sh" +
                    "ippedDate], T1.[Orders Qry_ShipVia], T1.[Orders Qry_Freight], T1.[Orders Qry_Shi" +
                    "pName], T1.[Orders Qry_ShipAddress], T1.[Orders Qry_ShipCity], T1.[Orders Qry_Sh" +
                    "ipRegion], T1.[Orders Qry_ShipPostalCode], T1.[Orders Qry_ShipCountry], T1.[Orde" +
                    "rs Qry_CompanyName], T1.[Orders Qry_Address], T1.[Orders Qry_City], T1.[Orders Q" +
                    "ry_Region], T1.[Orders Qry_PostalCode], T1.[Orders Qry_Country])\r\n    FROM (\r\n  " +
                    "      SELECT \r\n            T.OrderID AS [Orders Qry_OrderID], \r\n            T.Cu" +
                    "stomerID AS [Orders Qry_CustomerID], \r\n            T.EmployeeID AS [Orders Qry_E" +
                    "mployeeID], \r\n            T.OrderDate AS [Orders Qry_OrderDate], \r\n            T" +
                    ".RequiredDate AS [Orders Qry_RequiredDate], \r\n            T.ShippedDate AS [Orde" +
                    "rs Qry_ShippedDate], \r\n            T.ShipVia AS [Orders Qry_ShipVia], \r\n        " +
                    "    T.Freight AS [Orders Qry_Freight], \r\n            T.ShipName AS [Orders Qry_S" +
                    "hipName], \r\n            T.ShipAddress AS [Orders Qry_ShipAddress], \r\n           " +
                    " T.ShipCity AS [Orders Qry_ShipCity], \r\n            T.ShipRegion AS [Orders Qry_" +
                    "ShipRegion], \r\n            T.ShipPostalCode AS [Orders Qry_ShipPostalCode], \r\n  " +
                    "          T.ShipCountry AS [Orders Qry_ShipCountry], \r\n            T.CompanyName" +
                    " AS [Orders Qry_CompanyName], \r\n            T.Address AS [Orders Qry_Address], \r" +
                    "\n            T.City AS [Orders Qry_City], \r\n            T.Region AS [Orders Qry_" +
                    "Region], \r\n            T.PostalCode AS [Orders Qry_PostalCode], \r\n            T." +
                    "Country AS [Orders Qry_Country], \r\n            True AS _from0\r\n        FROM Nort" +
                    "hwindEFContext.Orders_Qry AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.Orders_Qry
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView47()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.Orders_Qry", "\r\n    SELECT VALUE -- Constructing Orders_Qry\r\n        [NorthwindEF.Orders_Qry](T" +
                    "1.[Orders_Qry.OrderID], T1.[Orders_Qry.CustomerID], T1.[Orders_Qry.EmployeeID], " +
                    "T1.[Orders_Qry.OrderDate], T1.[Orders_Qry.RequiredDate], T1.[Orders_Qry.ShippedD" +
                    "ate], T1.[Orders_Qry.ShipVia], T1.[Orders_Qry.Freight], T1.[Orders_Qry.ShipName]" +
                    ", T1.[Orders_Qry.ShipAddress], T1.[Orders_Qry.ShipCity], T1.[Orders_Qry.ShipRegi" +
                    "on], T1.[Orders_Qry.ShipPostalCode], T1.[Orders_Qry.ShipCountry], T1.[Orders_Qry" +
                    ".CompanyName], T1.[Orders_Qry.Address], T1.[Orders_Qry.City], T1.[Orders_Qry.Reg" +
                    "ion], T1.[Orders_Qry.PostalCode], T1.[Orders_Qry.Country])\r\n    FROM (\r\n        " +
                    "SELECT \r\n            T.OrderID AS [Orders_Qry.OrderID], \r\n            T.Customer" +
                    "ID AS [Orders_Qry.CustomerID], \r\n            T.EmployeeID AS [Orders_Qry.Employe" +
                    "eID], \r\n            T.OrderDate AS [Orders_Qry.OrderDate], \r\n            T.Requi" +
                    "redDate AS [Orders_Qry.RequiredDate], \r\n            T.ShippedDate AS [Orders_Qry" +
                    ".ShippedDate], \r\n            T.ShipVia AS [Orders_Qry.ShipVia], \r\n            T." +
                    "Freight AS [Orders_Qry.Freight], \r\n            T.ShipName AS [Orders_Qry.ShipNam" +
                    "e], \r\n            T.ShipAddress AS [Orders_Qry.ShipAddress], \r\n            T.Shi" +
                    "pCity AS [Orders_Qry.ShipCity], \r\n            T.ShipRegion AS [Orders_Qry.ShipRe" +
                    "gion], \r\n            T.ShipPostalCode AS [Orders_Qry.ShipPostalCode], \r\n        " +
                    "    T.ShipCountry AS [Orders_Qry.ShipCountry], \r\n            T.CompanyName AS [O" +
                    "rders_Qry.CompanyName], \r\n            T.Address AS [Orders_Qry.Address], \r\n     " +
                    "       T.City AS [Orders_Qry.City], \r\n            T.Region AS [Orders_Qry.Region" +
                    "], \r\n            T.PostalCode AS [Orders_Qry.PostalCode], \r\n            T.Countr" +
                    "y AS [Orders_Qry.Country], \r\n            True AS _from0\r\n        FROM NorthwindE" +
                    "FStoreContainer.[Orders Qry] AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.Product Sales for 1997
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView48()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.Product Sales for 1997", @"
    SELECT VALUE -- Constructing Product Sales for 1997
        [NorthwindEF.Store.Product Sales for 1997](T1.[Product Sales for 1997_CategoryName], T1.[Product Sales for 1997_ProductName], T1.[Product Sales for 1997_ProductSales])
    FROM (
        SELECT 
            T.CategoryName AS [Product Sales for 1997_CategoryName], 
            T.ProductName AS [Product Sales for 1997_ProductName], 
            T.ProductSales AS [Product Sales for 1997_ProductSales], 
            True AS _from0
        FROM NorthwindEFContext.Product_Sales_for_1997 AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.Product_Sales_for_1997
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView49()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.Product_Sales_for_1997", @"
    SELECT VALUE -- Constructing Product_Sales_for_1997
        [NorthwindEF.Product_Sales_for_1997](T1.[Product_Sales_for_1997.CategoryName], T1.[Product_Sales_for_1997.ProductName], T1.[Product_Sales_for_1997.ProductSales])
    FROM (
        SELECT 
            T.CategoryName AS [Product_Sales_for_1997.CategoryName], 
            T.ProductName AS [Product_Sales_for_1997.ProductName], 
            T.ProductSales AS [Product_Sales_for_1997.ProductSales], 
            True AS _from0
        FROM NorthwindEFStoreContainer.[Product Sales for 1997] AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.Products Above Average Price
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView50()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.Products Above Average Price", @"
    SELECT VALUE -- Constructing Products Above Average Price
        [NorthwindEF.Store.Products Above Average Price](T1.[Products Above Average Price_ProductName], T1.[Products Above Average Price_UnitPrice])
    FROM (
        SELECT 
            T.ProductName AS [Products Above Average Price_ProductName], 
            T.UnitPrice AS [Products Above Average Price_UnitPrice], 
            True AS _from0
        FROM NorthwindEFContext.Products_Above_Average_Price AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.Products_Above_Average_Price
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView51()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.Products_Above_Average_Price", @"
    SELECT VALUE -- Constructing Products_Above_Average_Price
        [NorthwindEF.Products_Above_Average_Price](T1.[Products_Above_Average_Price.ProductName], T1.[Products_Above_Average_Price.UnitPrice])
    FROM (
        SELECT 
            T.ProductName AS [Products_Above_Average_Price.ProductName], 
            T.UnitPrice AS [Products_Above_Average_Price.UnitPrice], 
            True AS _from0
        FROM NorthwindEFStoreContainer.[Products Above Average Price] AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.Products by Category
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView52()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.Products by Category", @"
    SELECT VALUE -- Constructing Products by Category
        [NorthwindEF.Store.Products by Category](T1.[Products by Category_CategoryName], T1.[Products by Category_ProductName], T1.[Products by Category_QuantityPerUnit], T1.[Products by Category_UnitsInStock], T1.[Products by Category_Discontinued])
    FROM (
        SELECT 
            T.CategoryName AS [Products by Category_CategoryName], 
            T.ProductName AS [Products by Category_ProductName], 
            T.QuantityPerUnit AS [Products by Category_QuantityPerUnit], 
            T.UnitsInStock AS [Products by Category_UnitsInStock], 
            T.Discontinued AS [Products by Category_Discontinued], 
            True AS _from0
        FROM NorthwindEFContext.Products_by_Category AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.Products_by_Category
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView53()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.Products_by_Category", @"
    SELECT VALUE -- Constructing Products_by_Category
        [NorthwindEF.Products_by_Category](T1.[Products_by_Category.CategoryName], T1.[Products_by_Category.ProductName], T1.[Products_by_Category.QuantityPerUnit], T1.[Products_by_Category.UnitsInStock], T1.[Products_by_Category.Discontinued])
    FROM (
        SELECT 
            T.CategoryName AS [Products_by_Category.CategoryName], 
            T.ProductName AS [Products_by_Category.ProductName], 
            T.QuantityPerUnit AS [Products_by_Category.QuantityPerUnit], 
            T.UnitsInStock AS [Products_by_Category.UnitsInStock], 
            T.Discontinued AS [Products_by_Category.Discontinued], 
            True AS _from0
        FROM NorthwindEFStoreContainer.[Products by Category] AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.Sales by Category
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView54()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.Sales by Category", @"
    SELECT VALUE -- Constructing Sales by Category
        [NorthwindEF.Store.Sales by Category](T1.[Sales by Category_CategoryID], T1.[Sales by Category_CategoryName], T1.[Sales by Category_ProductName], T1.[Sales by Category_ProductSales])
    FROM (
        SELECT 
            T.CategoryID AS [Sales by Category_CategoryID], 
            T.CategoryName AS [Sales by Category_CategoryName], 
            T.ProductName AS [Sales by Category_ProductName], 
            T.ProductSales AS [Sales by Category_ProductSales], 
            True AS _from0
        FROM NorthwindEFContext.Sales_by_Category AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.Sales_by_Category
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView55()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.Sales_by_Category", @"
    SELECT VALUE -- Constructing Sales_by_Category
        [NorthwindEF.Sales_by_Category](T1.[Sales_by_Category.CategoryID], T1.[Sales_by_Category.CategoryName], T1.[Sales_by_Category.ProductName], T1.[Sales_by_Category.ProductSales])
    FROM (
        SELECT 
            T.CategoryID AS [Sales_by_Category.CategoryID], 
            T.CategoryName AS [Sales_by_Category.CategoryName], 
            T.ProductName AS [Sales_by_Category.ProductName], 
            T.ProductSales AS [Sales_by_Category.ProductSales], 
            True AS _from0
        FROM NorthwindEFStoreContainer.[Sales by Category] AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.Sales Totals by Amount
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView56()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.Sales Totals by Amount", @"
    SELECT VALUE -- Constructing Sales Totals by Amount
        [NorthwindEF.Store.Sales Totals by Amount](T1.[Sales Totals by Amount_SaleAmount], T1.[Sales Totals by Amount_OrderID], T1.[Sales Totals by Amount_CompanyName], T1.[Sales Totals by Amount_ShippedDate])
    FROM (
        SELECT 
            T.SaleAmount AS [Sales Totals by Amount_SaleAmount], 
            T.OrderID AS [Sales Totals by Amount_OrderID], 
            T.CompanyName AS [Sales Totals by Amount_CompanyName], 
            T.ShippedDate AS [Sales Totals by Amount_ShippedDate], 
            True AS _from0
        FROM NorthwindEFContext.Sales_Totals_by_Amount AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.Sales_Totals_by_Amount
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView57()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.Sales_Totals_by_Amount", @"
    SELECT VALUE -- Constructing Sales_Totals_by_Amount
        [NorthwindEF.Sales_Totals_by_Amount](T1.[Sales_Totals_by_Amount.SaleAmount], T1.[Sales_Totals_by_Amount.OrderID], T1.[Sales_Totals_by_Amount.CompanyName], T1.[Sales_Totals_by_Amount.ShippedDate])
    FROM (
        SELECT 
            T.SaleAmount AS [Sales_Totals_by_Amount.SaleAmount], 
            T.OrderID AS [Sales_Totals_by_Amount.OrderID], 
            T.CompanyName AS [Sales_Totals_by_Amount.CompanyName], 
            T.ShippedDate AS [Sales_Totals_by_Amount.ShippedDate], 
            True AS _from0
        FROM NorthwindEFStoreContainer.[Sales Totals by Amount] AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.Summary of Sales by Quarter
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView58()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.Summary of Sales by Quarter", @"
    SELECT VALUE -- Constructing Summary of Sales by Quarter
        [NorthwindEF.Store.Summary of Sales by Quarter](T1.[Summary of Sales by Quarter_ShippedDate], T1.[Summary of Sales by Quarter_OrderID], T1.[Summary of Sales by Quarter_Subtotal])
    FROM (
        SELECT 
            T.ShippedDate AS [Summary of Sales by Quarter_ShippedDate], 
            T.OrderID AS [Summary of Sales by Quarter_OrderID], 
            T.Subtotal AS [Summary of Sales by Quarter_Subtotal], 
            True AS _from0
        FROM NorthwindEFContext.Summary_of_Sales_by_Quarter AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.Summary_of_Sales_by_Quarter
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView59()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.Summary_of_Sales_by_Quarter", @"
    SELECT VALUE -- Constructing Summary_of_Sales_by_Quarter
        [NorthwindEF.Summary_of_Sales_by_Quarter](T1.[Summary_of_Sales_by_Quarter.ShippedDate], T1.[Summary_of_Sales_by_Quarter.OrderID], T1.[Summary_of_Sales_by_Quarter.Subtotal])
    FROM (
        SELECT 
            T.ShippedDate AS [Summary_of_Sales_by_Quarter.ShippedDate], 
            T.OrderID AS [Summary_of_Sales_by_Quarter.OrderID], 
            T.Subtotal AS [Summary_of_Sales_by_Quarter.Subtotal], 
            True AS _from0
        FROM NorthwindEFStoreContainer.[Summary of Sales by Quarter] AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFStoreContainer.Summary of Sales by Year
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView60()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFStoreContainer.Summary of Sales by Year", @"
    SELECT VALUE -- Constructing Summary of Sales by Year
        [NorthwindEF.Store.Summary of Sales by Year](T1.[Summary of Sales by Year_ShippedDate], T1.[Summary of Sales by Year_OrderID], T1.[Summary of Sales by Year_Subtotal])
    FROM (
        SELECT 
            T.ShippedDate AS [Summary of Sales by Year_ShippedDate], 
            T.OrderID AS [Summary of Sales by Year_OrderID], 
            T.Subtotal AS [Summary of Sales by Year_Subtotal], 
            True AS _from0
        FROM NorthwindEFContext.Summary_of_Sales_by_Year AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for NorthwindEFContext.Summary_of_Sales_by_Year
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView61()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("NorthwindEFContext.Summary_of_Sales_by_Year", @"
    SELECT VALUE -- Constructing Summary_of_Sales_by_Year
        [NorthwindEF.Summary_of_Sales_by_Year](T1.[Summary_of_Sales_by_Year.ShippedDate], T1.[Summary_of_Sales_by_Year.OrderID], T1.[Summary_of_Sales_by_Year.Subtotal])
    FROM (
        SELECT 
            T.ShippedDate AS [Summary_of_Sales_by_Year.ShippedDate], 
            T.OrderID AS [Summary_of_Sales_by_Year.OrderID], 
            T.Subtotal AS [Summary_of_Sales_by_Year.Subtotal], 
            True AS _from0
        FROM NorthwindEFStoreContainer.[Summary of Sales by Year] AS T
    ) AS T1");
        }
    }
}
